/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 ./public/charater1.glb -o ./src/Character.jsx 
*/

import React, { useEffect, useRef } from 'react'
import { useGLTF, useAnimations, useKeyboardControls } from '@react-three/drei'
import {useControls}from "leva"
import { RigidBody, CapsuleCollider } from '@react-three/rapier'
import { useFrame } from '@react-three/fiber';

import * as THREE from "three";
const CHARACTER_HEIGH=1.79;
const CAPSULE_RADIUS=0.3;

function ApplyShadow({refTarget}){
  useEffect(()=>{
    refTarget.current?.traverse((obj)=>{
      if(obj.isMesh){
        obj.castShadow=true;
        obj.receiveShadow=true;
      }
    })
  },[])
}

function UpdateFrame({actions,refModel}){
  const [/*subscribeKeys*/, getKeys]=useKeyboardControls();
  const refPlayingActionName=useRef();
  const playAction=(actionName)=>{
      if(refPlayingActionName.current === actionName) return ;
      const action=actions[actionName];
      const prevAction=actions[refPlayingActionName.current];
      action.reset().fadeIn(0.5).play();
      prevAction?.fadeOut(0.5);
      refPlayingActionName.current=actionName;

  }
  useFrame((state,delta)=>{
    const keys=getKeys();
    if(keys.forward || keys.leftward || keys.rightward || keys.backward){
      if(keys.walk){
          playAction("walk");
      }
      else{
        playAction("run");
      }
    }
    else{
      playAction("Armature|mixamo.com|Layer0");
    }
    const camera=state.camera;
    const model=refModel.current;
    const modelPosition=new THREE.Vector3();
    model.getWorldPosition(modelPosition);
    const angleCameraDirectionAxisY=Math.atan2(
      camera.position.x-modelPosition.x,
      camera.position.z-modelPosition.z
    )+Math.PI;
    const rotateQuarternion=new THREE.Quaternion();
    rotateQuarternion.setFromAxisAngle(new THREE.Vector3(0,1,0),
    angleCameraDirectionAxisY);
    model.quaternion.rotateTowards(rotateQuarternion,THREE.MathUtils.degToRad(1));
  });
}

export function Character(props) {
  const group = useRef()
  const { nodes, materials, animations } = useGLTF('/charater1.glb')
  const { actions } = useAnimations(animations, group)
   //GUI에 애니메이션 이름 표시 (4월 25일 추가함)
  const animationNames=Object.keys(actions);
  const {animationName}=useControls({
    animationName:{
      value:animationNames[0],
      option:animationNames
    }
  })
  console.log(animationNames);

  useEffect(()=>{
    const action=actions[animationName];
    action.reset().fadeIn(0.5).play();
    return ()=>{
      action.fadeOut(0.5);
    }
  },[animationName])

  return (
    <>
    <RigidBody colliders={false} position={[0,2,0]}>
      <CapsuleCollider args={[CHARACTER_HEIGH/2-CAPSULE_RADIUS,CAPSULE_RADIUS]}/>
    <group ref={group} {...props} dispose={null} position-y={-CHARACTER_HEIGH/2}>
      <group name="Scene">
        <group name="charater" rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
          <primitive object={nodes.mixamorig8Hips} />
          <skinnedMesh name="Ch07_Body001" geometry={nodes.Ch07_Body001.geometry} material={materials['Ch07_body.001']} skeleton={nodes.Ch07_Body001.skeleton} />
          <skinnedMesh name="Ch07_Eyelashes001" geometry={nodes.Ch07_Eyelashes001.geometry} material={materials['Ch07_hair.001']} skeleton={nodes.Ch07_Eyelashes001.skeleton} />
          <skinnedMesh name="Ch07_Hair001" geometry={nodes.Ch07_Hair001.geometry} material={materials['Ch07_hair.001']} skeleton={nodes.Ch07_Hair001.skeleton} />
          <skinnedMesh name="Ch07_Heels001" geometry={nodes.Ch07_Heels001.geometry} material={materials['Ch07_body.001']} skeleton={nodes.Ch07_Heels001.skeleton} />
          <skinnedMesh name="Ch07_Pants001" geometry={nodes.Ch07_Pants001.geometry} material={materials['Ch07_body.001']} skeleton={nodes.Ch07_Pants001.skeleton} />
          <skinnedMesh name="Ch07_Shirt001" geometry={nodes.Ch07_Shirt001.geometry} material={materials['Ch07_body.001']} skeleton={nodes.Ch07_Shirt001.skeleton} />
          <skinnedMesh name="Ch07_Suit001" geometry={nodes.Ch07_Suit001.geometry} material={materials['Ch07_body.001']} skeleton={nodes.Ch07_Suit001.skeleton} />
        </group>
      </group>
    </group>
    </RigidBody>
    <ApplyShadow refTarget={group}/>
    <UpdateFrame actions={actions} refModel={group}/>
    </>
  )
}

useGLTF.preload('/charater1.glb')
